// <auto-generated />
using System;
using FastDeliveryBE.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FastDeliveryBE.Migrations
{
    [DbContext(typeof(FastDeliveryContext))]
    [Migration("20231019174012_AddingIdentity")]
    partial class AddingIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FastDeliveryBE.Models.ApprovalsPhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApprovalTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ApprovalTypeID");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<int>("FormId")
                        .HasColumnType("int")
                        .HasColumnName("FormID");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PhaseOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalTypeId");

                    b.HasIndex("FormId");

                    b.ToTable("ApprovalsPhases");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.ApprovalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ApprovalTypes");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.AssignedTask", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TaskID");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("DecisionId")
                        .HasColumnType("int")
                        .HasColumnName("DecisionID");

                    b.Property<Guid?>("ExecutedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExecutedOn")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PhaseId")
                        .HasColumnType("int")
                        .HasColumnName("PhaseID");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<DateTime?>("TimeOutOn")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.HasKey("TaskId")
                        .HasName("PK_RequestApprovals");

                    b.HasIndex("PhaseId");

                    b.HasIndex("RequestId");

                    b.ToTable("AssignedTasks");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.Attachment", b =>
                {
                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AttachmentID");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("RequestElementId")
                        .HasColumnType("int")
                        .HasColumnName("RequestElementID");

                    b.HasKey("AttachmentId");

                    b.HasIndex("RequestElementId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.DataSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DataSources");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.DataSourceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DataSourceId")
                        .HasColumnType("int")
                        .HasColumnName("DataSourceID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DataSourceId");

                    b.ToTable("DataSourceItems");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.DecisionsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DecisionsTypes");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DepartmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentTypeID");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ManagerUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ManagerUserID");

                    b.Property<int?>("ParentDepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentDepartmentID");

                    b.HasKey("DepartmentId");

                    b.HasIndex("DepartmentTypeId");

                    b.HasIndex("ManagerUserId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.DepartmentsApprovalDelegation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<Guid>("DelegatedUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DelegatedUserID");

                    b.Property<int>("DelegatorDepartmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DepartmentsApprovalDelegations");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.DepartmentsApprovalLevel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<bool>("ForManager")
                        .HasColumnType("bit");

                    b.Property<int>("LevelOfApproval")
                        .HasColumnType("int");

                    b.Property<int>("ManagerDepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("ManagerDepartmentID");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ManagerDepartmentId");

                    b.ToTable("DepartmentsApprovalLevel", (string)null);
                });

            modelBuilder.Entity("FastDeliveryBE.Models.DepartmentsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DepartmentsTypes");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.ElementsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ElementsTypes");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedOn")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.FormElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ElementOwnerId")
                        .HasColumnType("int")
                        .HasColumnName("ElementOwnerID");

                    b.Property<int>("ElementTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ElementTypeID");

                    b.Property<int?>("ExternalSourceId")
                        .HasColumnType("int")
                        .HasColumnName("ExternalSourceID");

                    b.Property<int>("FormId")
                        .HasColumnType("int")
                        .HasColumnName("FormID");

                    b.Property<bool>("HasSource")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int")
                        .HasColumnName("SourceID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ElementTypeId");

                    b.HasIndex("FormId");

                    b.HasIndex("SourceId");

                    b.ToTable("FormElements");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedOn")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.PhaseDecision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DecisionId")
                        .HasColumnType("int")
                        .HasColumnName("DecisionID");

                    b.Property<bool>("IsClosure")
                        .HasColumnType("bit");

                    b.Property<int>("PhaseId")
                        .HasColumnType("int")
                        .HasColumnName("PhaseID");

                    b.HasKey("Id");

                    b.HasIndex("DecisionId");

                    b.HasIndex("PhaseId");

                    b.ToTable("PhaseDecisions");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.Request", b =>
                {
                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("CurrentPhaseId")
                        .HasColumnType("int")
                        .HasColumnName("CurrentPhaseID");

                    b.Property<int>("RequestStatusId")
                        .HasColumnType("int")
                        .HasColumnName("RequestStatusID");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("RequestId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.RequestElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("FormElementId")
                        .HasColumnType("int")
                        .HasColumnName("FormElementID");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("FormElementId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestElements");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("FormId")
                        .HasColumnType("int")
                        .HasColumnName("FormID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.TaskOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TaskID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.ToTable("TaskOwners");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedOn")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SubDepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("SubDepartmentID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.UsersGroup", b =>
                {
                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GroupID");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersGroups");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FastDeliveryBE.Models.ApprovalsPhase", b =>
                {
                    b.HasOne("FastDeliveryBE.Models.ApprovalType", "ApprovalType")
                        .WithMany("ApprovalsPhases")
                        .HasForeignKey("ApprovalTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ApprovalsPhases_ApprovalTypes");

                    b.HasOne("FastDeliveryBE.Models.Form", "Form")
                        .WithMany("ApprovalsPhases")
                        .HasForeignKey("FormId")
                        .IsRequired()
                        .HasConstraintName("FK_ApprovalsPhases_Forms");

                    b.Navigation("ApprovalType");

                    b.Navigation("Form");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.AssignedTask", b =>
                {
                    b.HasOne("FastDeliveryBE.Models.ApprovalsPhase", "Phase")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("PhaseId")
                        .IsRequired()
                        .HasConstraintName("FK_RequestApprovals_ApprovalsPhases");

                    b.HasOne("FastDeliveryBE.Models.Request", "Request")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FK_RequestApprovals_Requests");

                    b.Navigation("Phase");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.Attachment", b =>
                {
                    b.HasOne("FastDeliveryBE.Models.RequestElement", "RequestElement")
                        .WithMany("Attachments")
                        .HasForeignKey("RequestElementId")
                        .IsRequired()
                        .HasConstraintName("FK_Attachments_RequestElements");

                    b.Navigation("RequestElement");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.DataSourceItem", b =>
                {
                    b.HasOne("FastDeliveryBE.Models.DataSource", "DataSource")
                        .WithMany("DataSourceItems")
                        .HasForeignKey("DataSourceId")
                        .IsRequired()
                        .HasConstraintName("FK_DataSourceItems_DataSources");

                    b.Navigation("DataSource");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.Department", b =>
                {
                    b.HasOne("FastDeliveryBE.Models.DepartmentsType", "DepartmentType")
                        .WithMany("Departments")
                        .HasForeignKey("DepartmentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Departments_DepartmentsTypes");

                    b.HasOne("FastDeliveryBE.Models.User", "ManagerUser")
                        .WithMany("Departments")
                        .HasForeignKey("ManagerUserId")
                        .HasConstraintName("FK_Departments_Users");

                    b.Navigation("DepartmentType");

                    b.Navigation("ManagerUser");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.DepartmentsApprovalLevel", b =>
                {
                    b.HasOne("FastDeliveryBE.Models.Department", "Department")
                        .WithMany("DepartmentsApprovalLevelDepartments")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_DepartmentsApprovalLevel_Departments");

                    b.HasOne("FastDeliveryBE.Models.Department", "ManagerDepartment")
                        .WithMany("DepartmentsApprovalLevelManagerDepartments")
                        .HasForeignKey("ManagerDepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_DepartmentsApprovalLevel_Departments1");

                    b.Navigation("Department");

                    b.Navigation("ManagerDepartment");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.FormElement", b =>
                {
                    b.HasOne("FastDeliveryBE.Models.ElementsType", "ElementType")
                        .WithMany("FormElements")
                        .HasForeignKey("ElementTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_FormElements_ElementsTypes");

                    b.HasOne("FastDeliveryBE.Models.Form", "Form")
                        .WithMany("FormElements")
                        .HasForeignKey("FormId")
                        .IsRequired()
                        .HasConstraintName("FK_FormElements_FormElements1");

                    b.HasOne("FastDeliveryBE.Models.DataSource", "Source")
                        .WithMany("FormElements")
                        .HasForeignKey("SourceId")
                        .HasConstraintName("FK_FormElements_DataSources");

                    b.Navigation("ElementType");

                    b.Navigation("Form");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.PhaseDecision", b =>
                {
                    b.HasOne("FastDeliveryBE.Models.DecisionsType", "Decision")
                        .WithMany("PhaseDecisions")
                        .HasForeignKey("DecisionId")
                        .IsRequired()
                        .HasConstraintName("FK_PhaseDecisions_DecisionsTypes");

                    b.HasOne("FastDeliveryBE.Models.ApprovalsPhase", "Phase")
                        .WithMany("PhaseDecisions")
                        .HasForeignKey("PhaseId")
                        .IsRequired()
                        .HasConstraintName("FK_PhaseDecisions_ApprovalsPhases");

                    b.Navigation("Decision");

                    b.Navigation("Phase");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.Request", b =>
                {
                    b.HasOne("FastDeliveryBE.Models.Service", "Service")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_Requests_Services");

                    b.HasOne("FastDeliveryBE.Models.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Requests_Users");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.RequestElement", b =>
                {
                    b.HasOne("FastDeliveryBE.Models.FormElement", "FormElement")
                        .WithMany("RequestElements")
                        .HasForeignKey("FormElementId")
                        .IsRequired()
                        .HasConstraintName("FK_RequestElements_FormElements");

                    b.HasOne("FastDeliveryBE.Models.Request", "Request")
                        .WithMany("RequestElements")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FK_RequestElements_Requests");

                    b.Navigation("FormElement");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.Service", b =>
                {
                    b.HasOne("FastDeliveryBE.Models.Form", "Form")
                        .WithMany("Services")
                        .HasForeignKey("FormId")
                        .IsRequired()
                        .HasConstraintName("FK_Services_Forms");

                    b.Navigation("Form");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.UsersGroup", b =>
                {
                    b.HasOne("FastDeliveryBE.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_UsersGroups_Groups");

                    b.HasOne("FastDeliveryBE.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UsersGroups_Users");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FastDeliveryBE.Models.ApprovalsPhase", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("PhaseDecisions");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.ApprovalType", b =>
                {
                    b.Navigation("ApprovalsPhases");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.DataSource", b =>
                {
                    b.Navigation("DataSourceItems");

                    b.Navigation("FormElements");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.DecisionsType", b =>
                {
                    b.Navigation("PhaseDecisions");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.Department", b =>
                {
                    b.Navigation("DepartmentsApprovalLevelDepartments");

                    b.Navigation("DepartmentsApprovalLevelManagerDepartments");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.DepartmentsType", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.ElementsType", b =>
                {
                    b.Navigation("FormElements");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.Form", b =>
                {
                    b.Navigation("ApprovalsPhases");

                    b.Navigation("FormElements");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.FormElement", b =>
                {
                    b.Navigation("RequestElements");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.Request", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("RequestElements");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.RequestElement", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.Service", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("FastDeliveryBE.Models.User", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
